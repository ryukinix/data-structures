#+STARTUP: showall align
#+OPTIONS: todo:nil tasks:("IN-PROGRESS" "DONE") tags:nil
#+AUTHOR: Manoel Vilela
#+TITLE: Estrutura de Dados @@latex:\\@@ Árvore AVL
#+DATE: <2017-10-19 Thu 23:37>
#+EXCLUDE_TAGS: TOC_3
#+LANGUAGE: bt-br
#+LATEX_HEADER: \usepackage[]{babel}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \renewcommand\listingscaption{Código}

* Sumário                                                             :TOC_3:
:PROPERTIES:
:CUSTOM_ID: toc-org
:END:
- [[#descrição][Descrição]]
- [[#origem-e-motivação][Origem e Motivação]]
- [[#fator-de-balanceamento][Fator de Balanceamento]]
- [[#regras][Regras]]
  - [[#rebalanceamento][Rebalanceamento]]
  - [[#inserção][Inserção]]
  - [[#remoção][Remoção]]
- [[#aplicação-de-simulação][Aplicação de simulação]]

* DONE Descrição
  CLOSED: [2017-10-19 Thu 23:58]

Esta nota se refere aos procedimentos necessário para balanceamento
que são envolvidos numa árvore do tipo AVL.


* DONE Origem e Motivação
  CLOSED: [2017-10-19 Thu 23:57]

A árvore AVL foi criada pelos matemáticos russos /Adelson Velsky/ e
/Landis/ na antiga união soviética em 1962 para que fosse possível
inserir e buscar um elemento em tempo de \(log(n)\) operações. Onde n é o
número de nós.

Sua complexidade é então de fato \(O(log(n)\) para ambas operações e
possuí espaço de \(O(n)\), considerando ambos pior e médio caso.

Para controlar o desbalanceamento da árvore com remoções e inserção,
ambos algoritmos que fazem essas operações consideram o
*fator de balanceamento*.

* DONE Fator de Balanceamento
  CLOSED: [2017-10-19 Thu 23:58]

O fator de balanceamento é o critério adotado nas operações de
inserção e remoção para mexer parar realizar uma operação de
balanceamento ou não na árvore. Isto é, ele que caracteriza
se a árvore está ou não balanceada, ou necessariamente, se uma
subárvore está desbalanceada.

O critério é definido da seguinte maneira:

Se a árvore é balanceada, todo nó terá fator de balanceamento
1, 0 ou -1.

O fator de balanceamento é definido pela equação:

\[
FB(T) = H(left(T)) - H(right(T))
\]

Onde T é uma árvore, left e right selecionam os filhos
e H é a função que calcula a altura.

* DONE Regras
  CLOSED: [2017-10-22 Sun 10:26]

A principal regra definida para esse tipo de estrutura de dados está
no procedimento de rebalanceamento que é executado após as operações
de inserção e remoção. Os critérios usados para balanceamento envolve
as alturas dos nós através do Fator de Balanceamento (FB) que pode
ter no máximo valor de módulo 1. As operações para rebalanceamento
envolve rotações em torno de um nó específico.

** DONE Rebalanceamento
   CLOSED: [2017-10-22 Sun 10:26]

Há dois casos para um nó qualquer:

1. Quando para um nó \(|FB| = 2\) e seu filho \(|FB| = 1\) mas ambos tem sinais
   trocados
2. Quando para um nó \(|FB| = 2\) e seu filho \(|FB| = 1\) mas ambos tem sinais
   iguais.

Para (1) efetua-se uma dupla rotação em torno do nó com \(|FB|
= 2\). Primeiro o filho, depois o pai. A direção da rotação é inversa ao
sinal, isto é, se é negativo, é para direita se é positivo é para
esquerda. A segunda rotação feita no nó filho e a direção é inversa a primeira.
Para (2) efetua-se apenas uma simples rotação de acordo com o sinal
de FB.

#+CAPTION: Pseudo-código para rotação simples a esquerda
#+BEGIN_SRC python
# Rotação Simples a Esquerda
# p aponta para o nó desbalanceado
q = right(p)
hold = left(q)
left(q) = p
right(p) = hold
p = q
#+END_SRC

#+CAPTION: Pseudo código para rotação simples a direita.
#+BEGIN_SRC python
# Rotação Simples a Direita
# p aponta para o nó desbalanceado
q = left(p)
hold = right(q)
right(q) = p
left(p) = hold
p = q
#+END_SRC

** DONE Inserção
  CLOSED: [2017-10-22 Sun 08:39]

A Árvore AVL é também uma Árvore Binária de Busca, portanto, os
critérios de onde inserir um novo nó permanece o mesmo. Insere-se a
direita se o nó a ser inserido é maior que o nó atual, insere-se a
esquerda se é menor que o nó atual.

De tal maneira, ao percorrer de maneira infixa (ou simétrica) você
terá um vetor ordenado de forma crescente.

Ao final da inserção, é necessário verificar se houve desbalanceamento
da árvore através dos critérios que envolve o cálculo do Fator de
Balanceamento. As regras usadas estão definidas no tópico anterior.


** DONE Remoção
  CLOSED: [2017-10-22 Sun 10:22]

As regras de remoção são no geral idênticas as descritas acima para
inserção, com a adição das propriedades usada em Árvore Binária de
Busca para remoção também.


* Aplicação de simulação

Uma aplicação de simulação é provida em [[http://www.cs.usfca.edu/~galles/visualization/AVLtree.html][AVL Tree Visualization]]
